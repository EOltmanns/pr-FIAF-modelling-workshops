name: validate-compile
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  validate:
    runs-on: ubuntu-latest 
    steps:
    - name: checkout repo
      uses: actions/checkout@v3
    - name: install rdflib
      run: pip3 install rdflib
    - name: install pydash
      run: pip3 install pydash
    - name: compile graph and validate
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          
          # import libraries
          
          import pathlib
          import rdflib
          
          # compile class files
          
          class_dir = pathlib.Path.cwd() / 'classes'
          classes = [x for x in class_dir.iterdir() if x.suffix == '.ttl']
          
          # load into graph, will throw syntax errors
          
          graph = rdflib.Graph()        
          for x in classes:
            graph.parse(x)
        
  compile:
    runs-on: ubuntu-latest
    env: 
      CI_COMMIT_MESSAGE: ontology compiled
    steps:
    - name: checkout repo
      uses: actions/checkout@v3
    - name: install rdflib
      run: pip3 install rdflib
    - name: compile graph and detect change
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          
          # import libraries
          
          import pathlib
          import rdflib
          
          # load original merged file to determine changes
          
          a = rdflib.Graph()
          a.parse(pathlib.Path.cwd() / 'ontology.ttl')

          # compile class files
          
          class_dir = pathlib.Path.cwd() / 'classes'
          classes = [x for x in class_dir.iterdir() if x.suffix == '.ttl']
          
          # load into graph
        
          b = rdflib.Graph()  
          for x in classes:
            b.parse(x)
            
          # detect changes between initial and compiled graphs
            
          set_env('CHANGE_DETECT', str(a.serialize(format='ttl') != b.serialize(format='ttl')))
          b.serialize(destination=str(pathlib.Path.cwd() / 'ontology.ttl'), format="turtle")

    - name: multilingual coverage
      uses: jannekem/run-python-script-action@v1
      if: github.event_name == 'push' 
      with:
        script: |
          
          # import libraries
          
          import pathlib
          import rdflib
          
          # attribute function
          
          def label_langauge(entity, lang):

            ''' Find labels matching selected language'''

            match = (len([o for s,p,o in graph.triples((entity, rdflib.RDFS.label, None)) if o.language == lang]))
            if match == 1:
              return entity
            else:
              print(f'No single {lang} label for {entity}.')
              return None
          
          # load ontology    
       
          graph = rdflib.Graph()
          graph.parse(pathlib.Path.cwd() / 'ontology.ttl')

          # collect all ontology entities

          entities = [s for s,p,o in graph.triples((None, rdflib.RDF.type, rdflib.OWL.Class))]
          entities += [s for s,p,o in graph.triples((None, rdflib.RDF.type, rdflib.OWL.ObjectProperty))]
          entities += [s for s,p,o in graph.triples((None, rdflib.RDF.type, rdflib.OWL.DatatypeProperty))]

          # report on coverage
          
          for l in ['en', 'es', 'fr']:
            tr = [label_langauge(x, l) for x in entities]
            tr = len([x for x in tr if x != None])
            print(f'{tr} of {len(entities)} entities with {l} translated label: {round((tr/len(entities))*100, 2)}%')
            
            # if you are feeling bold about this you could raise an exception when 100% coverage is not found.

    - name: uri checking
      uses: jannekem/run-python-script-action@v1
      if: github.event_name == 'push' 
      with:
        script: |
          
          # import libraries
          
          import pathlib
          import rdflib
          
          # load ontology    
       
          graph = rdflib.Graph()
          graph.parse(pathlib.Path.cwd() / 'ontology.ttl')
          
          # collect all entities
          
          entities = [s for s,p,o in graph.triples((None, rdflib.RDF.type, rdflib.OWL.Class))]
          entities += [s for s,p,o in graph.triples((None, rdflib.RDF.type, rdflib.OWL.ObjectProperty))]
          entities += [s for s,p,o in graph.triples((None, rdflib.RDF.type, rdflib.OWL.DatatypeProperty))]

          # length of entity name
          
          for x in entities:
            uri = str(x).replace('https://fiafcore.org/ontology/','')
            if len(uri) > 20:
              print('long URI', uri, len(uri))
          
          # unusual characters
          
          for x in entities:
            uri = str(x).replace('https://fiafcore.org/ontology/','')
            for a in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:
              uri = uri.replace(a, '').replace(a.upper(), '')
            for n in ['1','2','3','4','5','6','7','8','9','0']:
              uri = uri.replace(n, '')
            if len(uri):
              print('unusual URI', x, list(uri))
              
    - name: entity overlap
      uses: jannekem/run-python-script-action@v1
#       if: github.event_name == 'push' 
      with:
        script: |
          
          # import libraries
          
          import pathlib
          import pydash
          import rdflib
          
          # ontology fragments
          
          class_path = pathlib.Path.cwd() / 'classes'
          class_ttl = [x for x in class_path.iterdir() if x.suffix == '.ttl']
          
          print(class_ttl)
          
          for c in class_ttl:
            graph = rdflib.Graph().parse(c)
            
            
            entities = pydash.uniq([s for s,p,o in graph.triples((None, None, None))])
            
            print(c, len(graph), len(entities))

# legacy readme generator

#     - name: generate docs
#       uses: jannekem/run-python-script-action@v1
#       if: github.event_name == 'push' && env.CHANGE_DETECT == 'True'
#       with:
#         script: |
          
#           # import libraries
          
#           import pathlib
#           import rdflib
          
#           # formatter functions
          
#           def short_link(url):
            
#             ''' Shorten iri links to prefixed form. '''
            
#             if url[:4] == 'http':
#               short = url.replace('https://fiafcore.org/ontology/', 'fiaf:')
#               short = short.replace('http://www.w3.org/2002/07/owl#Class', 'owl:Class')
#               short = short.replace('http://www.w3.org/2002/07/owl#ObjectProperty', 'owl:ObjectProperty')
#               return f'[{short}]({url})'
#             return url
          
#           def attribute(subj, predicate, label):
          
#             ''' Pull all objects which match subject-predicate pattern. '''
            
#             text = ''
#             objs = [short_link(o) for s,p,o in graph.triples((subj, predicate, None))]
#             if len(objs):
#               text = f'{label} '+', '.join(objs)+'   \n'
#             return text
            
#           def element(source):
          
#             ''' Assemble attributes for entity. '''
            
#             text = ''
#             text += '#### '+attribute(source, rdflib.RDFS.label, '')
#             text += '> **iri** '+str(source)+'   \n'
#             text += attribute(source, rdflib.RDFS.label, '**label**')
#             text += attribute(source, rdflib.URIRef('http://purl.org/dc/elements/1.1/source'), '**source**')
#             text += attribute(source, rdflib.RDF.type, '**type**')
#             text += attribute(source, rdflib.RDFS.subClassOf, '**subclass of**')
#             text += attribute(source, rdflib.RDFS.domain, '**domain**')
#             text += attribute(source, rdflib.RDFS.range, '**range**')
#             return text
          
#           # load ontology    
       
#           graph = rdflib.Graph()
#           graph.parse(pathlib.Path.cwd() / 'ontology.ttl')

#           # workshop intro
          
#           md = '# Modelling Workshops\n'
#           md += 'Owing to recent conversation around formal modelling of the FIAF Cataloguing \
#             Manual and EN15907, we intend on holding a series of workshops to explicitly \
#             discuss these concepts. The goal of these workshops will be to provide both a \
#             formal implementation of the Cataloguing Manual (as RDF/OWL), as well as a shared \
#             model which could be used for the interoperability of film data between organisations.\n\n'
#           md += 'These will take place weekly, starting Thursday 12th of January at 5pm CET and \
#             will be short meetings of no longer than an hour each. \n\n'
#           md += 'Draft ontology: [ontology.ttl](ontology.ttl) \
#             [[WebVOWL](http://vowl.visualdataweb.org/webvowl-old/webvowl-old.html#iri=https://raw.githubusercontent.com/FIAF/modelling-workshops/main/ontology.ttl)]'
#           md += '\n\n'
#           for a,b in [
#             ('Classes', rdflib.OWL.Class),
#             ('Individuals', rdflib.OWL.NamedIndividual),
#             ('Object Properties', rdflib.OWL.ObjectProperty),
#             ('Datatype Properties', rdflib.OWL.DatatypeProperty)]:
#             md += f'## {a}'+'   \n'
#             for x in sorted([s for s,p,o in graph.triples((None, None, b))]):
#               md += element(x)
          
#           # write readme
          
#           with open(pathlib.Path.cwd() / 'README.md', 'w') as readme:
#             readme.write(md)
            
    - name: push graph
      if: github.event_name == 'push' && env.CHANGE_DETECT == 'True'
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        git add *
        git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
        git push
